% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cqr_example_lung.R
\name{cqr_lung}
\alias{cqr_lung}
\title{Examples for predicting the survival time of lung cancer patients using conformal quantile regression method}
\usage{
cqr_lung()
}
\value{
a picture
}
\description{
To explore the performance of conformal quantile regression in comparison with ordinary quantile regression (QR), we conduct a numerical experiment using the lung dataset from the survival package in R. After removing missing values, the dataset consists of 167 observations with 8 variables. The response variable, time, represents survival time, while the predictors include demographic and clinical factors such as age, sex, performance status (ECOG and Karnofsky scores), calorie intake, and weight loss.
}
\examples{
cqr_lung()


if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")
if (!requireNamespace("remotes", quietly = TRUE)) remotes::install_github("zhimeir/cfsurvival")
if (!requireNamespace("quantreg", quietly = TRUE)) {
  install.packages("quantreg")
}
library(quantreg)
library(cfsurvival)
library(survival)

data = lung[, c("time", "age", "sex", "ph.ecog", "ph.karno", "pat.karno", "meal.cal", "wt.loss")]
data = na.omit(data)

str(data)
nrep = 100
cqr_cov = numeric(nrep)
qr_cov = numeric(nrep)
cqr_length <- numeric(nrep)
qr_length <- numeric(nrep)
for (i in 1:nrep) {
  set.seed(i)
  train_ratio <- 0.7
  train_size <- floor(train_ratio * nrow(data))
  train_indices <- sample(seq_len(nrow(data)), size = train_size)
  train_data <- data[train_indices, ]
  test_data <- data[-train_indices, ]


  train_response <- train_data$time
  train_predictors <- train_data[, -1]
  test_response <- test_data$time
  test_predictors <- test_data[, -1]



  cqr_lower_bound <- cqr(
    x = test_predictors,
    Xtrain = train_predictors,
    Ytrain = train_response,
     alpha = 0.05
  )

  cqr_upper_bound <- -cqr(
    x = test_predictors,
    Xtrain = train_predictors,
    Ytrain = -train_response,
     alpha = 0.05
  )

  cqr_cov[i] <- mean((cqr_lower_bound<=test_response) & (test_response<=cqr_upper_bound))
  cqr_length[i] <- mean(cqr_upper_bound - cqr_lower_bound)
  # ordinary qr method
  formula <- as.formula(paste("time ~", paste(colnames(train_predictors), collapse = " + ")))
  qr_up <- rq(formula, data = train_data, tau = 0.95)
  qr_low <- rq(formula, data = train_data, tau = 0.05)
  qr_upper_bound <- predict(qr_up,
                             newdata = test_data,
                             type="quantile")
  qr_lower_bound <- predict(qr_low,
                            newdata = test_data,
                            type="quantile")
  qr_cov[i] <- mean((qr_lower_bound<=test_response) & (test_response<=qr_upper_bound))
   qr_length[i] <- mean(qr_upper_bound - qr_lower_bound)
}
# mean(cqr_upper_bound-cqr_lower_bound)
# sd(cqr_upper_bound-cqr_lower_bound)
# mean(qr_upper_bound-qr_lower_bound)
# sd(qr_upper_bound-qr_lower_bound)
mean(cqr_cov)
mean(qr_cov)
mean(cqr_length)
mean(qr_length)
 library(ggplot2)

 combined_data <- data.frame(
   Metric = rep(c("Coverage", "Interval Length"), each = 2 * nrep),
   Method = rep(rep(c("CQR", "QR"), each = nrep), 2),
   Value = c(cqr_cov, qr_cov, cqr_length, qr_length)
 )

 p1 = ggplot(combined_data, aes(x = Method, y = Value, fill = Method)) +
   geom_boxplot(alpha = 0.6) +
   geom_hline(data = subset(combined_data, Metric == "Coverage"),
              aes(yintercept = 0.9), color = "red", linetype = "dashed", size = 1) +
   facet_wrap(~Metric, scales = "free_y") +
   labs(title = "Comparison of Coverage Rate and Interval Length",
        x = "Method",
        y = "Value") +
   theme_minimal() +
   scale_fill_manual(values = c("CQR" = "blue", "QR" = "red"))
 # ggsave("cqr_lung.pdf", plot = p1, bg = "white")
 print(p1)
}
